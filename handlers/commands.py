# handlers/commands.py
# -*- coding: utf-8 -*-
"""
Handlers for basic informational and configuration commands.
Includes /edit command to modify last generated image using targeted editing.
Handles /prompt set/reset/clear for image suffix (renamed from prefix).
"""

import logging
from html import escape
from telegram import Update
from telegram.ext import ContextTypes
from telegram.constants import ParseMode
from utils.auth import is_authorized
from config import (
    CHAT_DATA_KEY_CONVERSATION_HISTORY, CHAT_DATA_KEY_IMAGE_SUFFIX, # Renamed key
    CHAT_DATA_KEY_TEXT_SYSTEM_PROMPT, DEFAULT_TEXT_SYSTEM_PROMPT,
    MAX_HISTORY_MESSAGES, CHAT_DATA_KEY_DISPLAY_LLM_TEXT,
    CHAT_DATA_KEY_LAST_GENERATION, IMAGE_STATE_CACHE_KEY_PREFIX,
    DEFAULT_IMAGE_PROMPT_SUFFIX # Renamed constant
)
from handlers.image_gen import parse_img_args_prompt_first, _initiate_image_generation, _initiate_image_editing
from utils.cache import get_cached_image_bytes
from utils.telegram_helpers import delete_message_safely
import config # Import config to access constants easily

logger = logging.getLogger(__name__)

      
      
# ================================== start(): Handles /start command ==================================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Reminder: Use new line, not semicolon, for the following block/statement.
    if not update.message or not update.effective_user:
        return
    logger.info(f"/start from {update.effective_user.id}")
    welcome_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç\\! –Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ \\(–∏ —Ç–µ–∫—Å—Ç–æ–º\\) —á–µ—Ä–µ–∑ Google Gemini\\. \n\n"
        "**–û—Å–Ω–æ–≤–Ω—ã–µ –ö–æ–º–∞–Ω–¥—ã:**\n"
        "`/img <–∑–∞–ø—Ä–æ—Å>` ‚Äî –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n"
        "`/ask <–≤–æ–ø—Ä–æ—Å>` ‚Äî –ó–∞–¥–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å \\(—Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏\\)\n"
        "`/clear` ‚Äî –û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç *—Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ* –¥–∏–∞–ª–æ–≥–∞\n"
        "`/history` ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç *—Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ* –¥–∏–∞–ª–æ–≥–∞\n"
        "`/prompt <—Ç–µ–∫—Å—Ç|reset|clear>` ‚Äî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ *—Å—É—Ñ—Ñ–∏–∫—Å–æ–º* –¥–ª—è *–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π*\n"
        "`/reset <—Ç–µ–∫—Å—Ç?>` ‚Äî –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å/—Å–±—Ä–æ—Å–∏—Ç—å *—Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é* –¥–ª—è *—Ç–µ–∫—Å—Ç–∞*\n"
        "`/toggle_llm` ‚Äî –í–∫–ª/–í—ã–∫–ª –ø–æ–∫–∞–∑ *—Ç–µ–∫—Å—Ç–∞* –æ—Ç Gemini –≤ –ø–æ–¥–ø–∏—Å–∏ \\(–ø–æ —É–º–æ–ª—á\\.: –í–´–ö–õ\\)\n"
        "`/types` ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤\\.\n"
        "`/styles` ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–∏–ª–µ–π –∏ –≥—Ä—É–ø–ø\\.\n"
        "`/artists` ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ö—É–¥–æ–∂–Ω–∏–∫–æ–≤\\.\n"
        "`/ts` ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ —Å –ø—Ä–∏–º–µ–Ω–∏–º—ã–º–∏ –∫ –Ω–∏–º —Å—Ç–∏–ª—è–º–∏\\.\n"
        "`/show_all` ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–ø–∏—Å–∫–∏ \\(—Ç–∏–ø—ã, —Å—Ç–∏–ª–∏, —Ö—É–¥–æ–∂–Ω–∏–∫–∏, —Ç–∏–ø—ã\\+—Å—Ç–∏–ª–∏\\)\\.\n"
        "`/man` ‚Äî –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è\\.\n" # Added /man
        "`/help` ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        # ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π —Ç–µ–∫—Å—Ç –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    )
    # Reminder: Use new line, not semicolon, for the following block/statement.
    try:
        await update.message.reply_markdown_v2(welcome_text, disable_web_page_preview=True)
    # Reminder: Use new line, not semicolon, for the following block/statement.
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ /start: {e}", exc_info=True)
# ================================== start() end ==================================

    
    


# ================================== help_command(): Handles /help command ==================================
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Reminder: Use new line, not semicolon, for the following block/statement.
    if not update.effective_user:
        return
    logger.info(f"/help from {update.effective_user.id}")
    await start(update, context)
# ================================== help_command() end ==================================


# ================================== clear_command(): Clears text conversation history ==================================
async def clear_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Reminder: Use new line, not semicolon, for the following block/statement.
    if not await is_authorized(update, context):
        return
    # Reminder: Use new line, not semicolon, for the following block/statement.
    if not update.message or not update.effective_chat or not update.effective_user:
        return
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    history_cleared = False
    history_key = CHAT_DATA_KEY_CONVERSATION_HISTORY
    # Reminder: Use new line, not semicolon, for the following block/statement.
    if history_key in context.chat_data:
        hist_len = len(context.chat_data[history_key])
        # Reminder: Use new line, not semicolon, for the following block/statement.
        if hist_len > 0:
            del context.chat_data[history_key]
            await update.message.reply_html(f"‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç ({hist_len}) –æ—á–∏—â–µ–Ω.")
            logger.info(f"–ò—Å—Ç–æ—Ä–∏—è {chat_id} –æ—á–∏—â–µ–Ω–∞ {user_id}")
            history_cleared = True
    # Reminder: Use new line, not semicolon, for the following block/statement.
    if not history_cleared:
        await update.message.reply_text("‚ÑπÔ∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—É—Å—Ç.")
# ================================== clear_command() end ==================================


# ================================== show_text_history_command(): Displays text conversation history ==================================
async def show_text_history_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Reminder: Use new line, not semicolon, for the following block/statement.
    if not await is_authorized(update, context):
        return
    # Reminder: Use new line, not semicolon, for the following block/statement.
    if not update.message or not update.effective_chat or not update.effective_user:
        return
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    history_key = CHAT_DATA_KEY_CONVERSATION_HISTORY
    logger.info(f"/history –æ—Ç {user_id} —á–∞—Ç {chat_id}")
    raw_history = context.chat_data.get(history_key, [])
    # Reminder: Use new line, not semicolon, for the following block/statement.
    if not raw_history:
        await update.message.reply_text("‚ÑπÔ∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—É—Å—Ç.")
        return
    display_limit = MAX_HISTORY_MESSAGES * 2
    history_to_display = raw_history[-display_limit:]
    num_displayed = len(history_to_display)
    total_in_memory = len(raw_history)
    formatted_lines = [f"üìñ <b>–ö–æ–Ω—Ç–µ–∫—Å—Ç</b> ({num_displayed}/{total_in_memory}):\n---"]
    for entry in history_to_display:
        role = entry.get("role", "?")
        text = entry.get("text", "").strip()
        sender = entry.get("sender")
        # Reminder: Use new line, not semicolon, for the following block/statement.
        if not text:
            continue
        escaped_text = escape(text);
        # Reminder: Use new line, not semicolon, for the following block/statement.
        if role == "user":
            entry_header = f"üë§ <b>{escape(sender) if sender else 'User'}:</b>"
        elif role == "model":
            entry_header = "ü§ñ <b>Gemini:</b>"
        else:
            entry_header = f"‚ùì <b>{escape(role.capitalize())}:</b>"
        truncated_text = (escaped_text[:500] + '...') if len(escaped_text) > 500 else escaped_text
        formatted_lines.append(f"{entry_header}\n{truncated_text}")
    full_text = "\n\n".join(formatted_lines)
    # Reminder: Use new line, not semicolon, for the following block/statement.
    if len(full_text) > 4096:
        full_text = full_text[:4080] + "\n...(—Å–æ–∫—Ä–∞—â–µ–Ω–æ)"
        logger.warning(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç {chat_id} —Å–æ–∫—Ä–∞—â–µ–Ω.")
    # Reminder: Use new line, not semicolon, for the following block/statement.
    try:
        await update.message.reply_html(full_text)
        logger.info(f"–û—Ç–æ–±—Ä–∞–∂–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è {user_id} —á–∞—Ç–∞ {chat_id}")
    # Reminder: Use new line, not semicolon, for the following block/statement.
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {chat_id}: {e}", exc_info=True)
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.")
# ================================== show_text_history_command() end ==================================


# ================================== set_image_prompt_suffix_command(): Handles /prompt <text|reset|clear> (Suffix) ==================================
async def set_image_prompt_suffix_command(update: Update, context: ContextTypes.DEFAULT_TYPE): # Renamed function
    # Reminder: Use new line, not semicolon, for the following block/statement.
    if not await is_authorized(update, context):
        return
    # Reminder: Use new line, not semicolon, for the following block/statement.
    if not update.message or not update.effective_chat or not update.effective_user:
        return
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    current_chat_data = context.chat_data
    prompt_key = config.CHAT_DATA_KEY_IMAGE_SUFFIX # Use new key
    default_suffix = config.DEFAULT_IMAGE_PROMPT_SUFFIX # Use new constant
    # Reminder: Use new line, not semicolon, for the following block/statement.
    if not context.args:
        current_suffix = current_chat_data.get(prompt_key, default_suffix)
        # Check explicitly for empty string to differentiate from default if default is also empty
        is_explicitly_cleared = prompt_key in current_chat_data and current_chat_data[prompt_key] == ""
        is_default = not is_explicitly_cleared and current_suffix == default_suffix
        usage_set = f"<code>/prompt {escape('<—Ç–µ–∫—Å—Ç>')}</code>"
        usage_reset = f"<code>/prompt reset</code>"
        usage_clear = f"<code>/prompt clear</code>"
        reply_text = "‚ÑπÔ∏è –¢–µ–∫—É—â–∏–π <b>—Å—É—Ñ—Ñ–∏–∫—Å</b> –¥–ª—è <b>–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</b>:\n" # Updated text
        # Reminder: Use new line, not semicolon, for the following block/statement.
        if is_explicitly_cleared:
            reply_text += "<i>(–ü—É—Å—Ç–æ - –æ—á–∏—â–µ–Ω–æ)</i>"
        elif current_suffix:
             reply_text += f"<code>{escape(current_suffix)}</code>"
        else:
            reply_text += "<i>(–ü—É—Å—Ç–æ - –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)</i>" # Default is empty
        # Reminder: Use new line, not semicolon, for the following block/statement.
        if is_default:
             reply_text += " (–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
        reply_text += f"\n\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: {usage_set}\n–°–±—Ä–æ—Å–∏—Ç—å –∫ —É–º–æ–ª—á.: {usage_reset}\n–û—á–∏—Å—Ç–∏—Ç—å: {usage_clear}"
        await update.message.reply_html(reply_text)
        return
    sub_command = " ".join(context.args).strip()
    # Reminder: Use new line, not semicolon, for the following block/statement.
    if sub_command.lower() == "reset":
        # Reminder: Use new line, not semicolon, for the following block/statement.
        if prompt_key in current_chat_data:
            del current_chat_data[prompt_key]
        await update.message.reply_html(f"‚úÖ <b>–°—É—Ñ—Ñ–∏–∫—Å</b> –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–±—Ä–æ—à–µ–Ω –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É:\n<code>{escape(default_suffix) if default_suffix else '(–ü—É—Å—Ç–æ)'}</code>") # Updated text
        logger.info(f"–°—É—Ñ—Ñ–∏–∫—Å img {chat_id} —Å–±—Ä–æ—à–µ–Ω –∫ —É–º–æ–ª—á. {user_id}")
    # --- Handle "clear" explicitly ---
    elif sub_command.lower() == "clear":
        current_chat_data[prompt_key] = "" # Set to empty string
        await update.message.reply_html(f"‚úÖ <b>–°—É—Ñ—Ñ–∏–∫—Å</b> –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—á–∏—â–µ–Ω.") # Updated text
        logger.info(f"–°—É—Ñ—Ñ–∏–∫—Å img {chat_id} –æ—á–∏—â–µ–Ω {user_id}")
    # --- Handle setting new text ---
    elif sub_command:
        # Reminder: Use new line, not semicolon, for the following block/statement.
        if len(sub_command) > 1000:
            await update.message.reply_text("‚ö†Ô∏è –°—É—Ñ—Ñ–∏–∫—Å > 1000.")
            return
        current_chat_data[prompt_key] = sub_command
        await update.message.reply_html(f"‚úÖ <b>–°—É—Ñ—Ñ–∏–∫—Å</b> –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:\n<code>{escape(sub_command)}</code>") # Updated text
        logger.info(f"–°—É—Ñ—Ñ–∏–∫—Å img {chat_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω {user_id}: '{sub_command[:50]}...'")
    else:
        # This case should ideally not be reached if context.args is checked first, but keep as fallback
        await update.message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç, 'reset' –∏–ª–∏ 'clear'.")
# ================================== set_image_prompt_suffix_command() end ==================================


# ================================== clear_image_prompt_suffix_command(): Handles /prompt clear (Suffix) ==================================
async def clear_image_prompt_suffix_command(update: Update, context: ContextTypes.DEFAULT_TYPE): # Renamed function
    # Reminder: Use new line, not semicolon, for the following block/statement.
    if not await is_authorized(update, context):
        return
    # Reminder: Use new line, not semicolon, for the following block/statement.
    if not update.message or not update.effective_chat or not update.effective_user:
        return
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    current_chat_data = context.chat_data
    prompt_key = config.CHAT_DATA_KEY_IMAGE_SUFFIX # Use new key
    current_chat_data[prompt_key] = "" # Set to empty string
    await update.message.reply_html(f"‚úÖ <b>–°—É—Ñ—Ñ–∏–∫—Å</b> –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—á–∏—â–µ–Ω (–¥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞).") # Updated text
    logger.info(f"–°—É—Ñ—Ñ–∏–∫—Å img {chat_id} –æ—á–∏—â–µ–Ω {user_id}")
# ================================== clear_image_prompt_suffix_command() end ==================================


# ================================== toggle_llm_text_command(): Toggles LLM text display ==================================
async def toggle_llm_text_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Reminder: Use new line, not semicolon, for the following block/statement.
    if not await is_authorized(update, context):
        return
    # Reminder: Use new line, not semicolon, for the following block/statement.
    if not update.message or not update.effective_chat or not update.effective_user:
        return
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    key = CHAT_DATA_KEY_DISPLAY_LLM_TEXT
    # Use the new default value from config
    current_value = context.chat_data.get(key, config.DEFAULT_DISPLAY_LLM_TEXT_BOOL)
    new_value = not current_value
    context.chat_data[key] = new_value
    state_text = "–í–ö–õ" if new_value else "–í–´–ö–õ"
    await update.message.reply_html(f"‚úÖ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ LLM –≤ –ø–æ–¥–ø–∏—Å—è—Ö: <b>{state_text}</b>.")
    logger.info(f"–¢–µ–∫—Å—Ç LLM {chat_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_value} {user_id}")
# ================================== toggle_llm_text_command() end ==================================


# ================================== reset_text_system_prompt_command(): Resets/sets text system prompt ==================================
async def reset_text_system_prompt_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Reminder: Use new line, not semicolon, for the following block/statement.
    if not await is_authorized(update, context):
        return
    # Reminder: Use new line, not semicolon, for the following block/statement.
    if not update.message or not update.effective_chat or not update.effective_user:
        return
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    current_chat_data = context.chat_data
    prompt_key = CHAT_DATA_KEY_TEXT_SYSTEM_PROMPT
    logger.debug(f"/reset check: before = {current_chat_data}")
    # Reminder: Use new line, not semicolon, for the following block/statement.
    if not context.args:
        prompt_was_set = prompt_key in current_chat_data
        # Reminder: Use new line, not semicolon, for the following block/statement.
        if prompt_was_set:
            del current_chat_data[prompt_key]
            logger.info(f"Removed '{prompt_key}' from {chat_id}")
        optional_feedback = "\n(–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è.)" if not prompt_was_set else ""
        reply_text = (f"‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è <b>—Ç–µ–∫—Å—Ç–∞</b> —Å–±—Ä–æ—à–µ–Ω–∞:\n<code>{escape(DEFAULT_TEXT_SYSTEM_PROMPT)}</code>{optional_feedback}")
        # Reminder: Use new line, not semicolon, for the following block/statement.
        try:
            await update.message.reply_html(reply_text)
        # Reminder: Use new line, not semicolon, for the following block/statement.
        except Exception as e:
            logger.error(f"Error /reset confirm: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞.")
        logger.info(f"–¢–µ–∫—Å—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è {chat_id} —Å–±—Ä–æ—à–µ–Ω–∞ {user_id}")
    else:
        new_prompt = " ".join(context.args).strip()
        # Reminder: Use new line, not semicolon, for the following block/statement.
        if not new_prompt:
            await update.message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ /reset.")
            return
        # Reminder: Use new line, not semicolon, for the following block/statement.
        if len(new_prompt) > 2000:
            await update.message.reply_text("‚ö†Ô∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è > 2000.")
            return
        current_chat_data[prompt_key] = new_prompt
        await update.message.reply_html(f"‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è <b>—Ç–µ–∫—Å—Ç–∞</b>:\n<code>{escape(new_prompt)}</code>")
        logger.info(f"–¢–µ–∫—Å—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è {chat_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ {user_id}: '{new_prompt[:50]}...'")
        logger.debug(f"/reset set: after = {current_chat_data}")
    logger.debug(f"/reset check: final = {context.chat_data}")
# ================================== reset_text_system_prompt_command() end ==================================


# handlers/commands.py end